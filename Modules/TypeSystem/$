(* 
*** Local Variables: ***
*** coq-prog-name: "../../coqsrc/bin/coqtop" ***
*** coq-load-path: (("../util" "util") "../theories") ***
*** compile-command: "make -C .. -k bar/foo.vo" ***
*** End:***
*)
Require Import Autosubst.Autosubst.


Require Import mathcomp.ssreflect.ssreflect.
From mathcomp Require Import ssreflect ssrfun ssrbool eqtype ssrnat seq.

(* Ici, on mélange les types et les termes dans une seule définition inductive
pour bénéficier au mieux de autosubst *)


(* AutosubstSsr (examples) *)
(** * Autosubst wrapper for ssreflect *)

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section MMapInstances.

Variable (A B C : Type).
Variable (MMap_A_B : MMap A B).
Variable (MMap_A_C : MMap A C).
Variable (MMapLemmas_A_B : MMapLemmas A B).
Variable (MMapLemmas_A_C : MMapLemmas A C).
Variable (MMapExt_A_B : MMapExt A B).
Variable (MMapExt_A_C : MMapExt A C).


Global Instance MMap_option : MMap A (option B) := fun f => omap (mmap f).
Global Instance MMapLemmas_option : MMapLemmas A (option B). derive. Qed.
Global Instance MMapExt_option : MMapExt A (option B). derive. Defined.


Global Instance MMap_pair : MMap A (B * C). derive. Defined.
Global Instance MMapLemmas_pair : MMapLemmas A (B * C). derive. Qed.
Global Instance MMapExt_pair : MMapExt A (B * C). derive. Defined.


Global Instance mmap_seq : MMap A (seq B) := fun f => map (mmap f).
Global Instance mmapLemmas_seq : MMapLemmas A (seq B). derive. Qed.
Global Instance mmapExt_seq : MMapExt A (seq B). derive. Defined.


Global Instance MMap_fun : MMap A (B -> C) := fun f g x => mmap f (g x).

Global Instance MMapLemmas_fun : MMapLemmas A (B -> C).
Proof.
  constructor; intros; f_ext; intros; [apply mmap_id|apply mmap_comp].
Qed.

Global Instance MMapExt_fun : MMapExt A (B -> C).
Proof.
  hnf. intros f g H h. f_ext. intro x. apply mmap_ext. exact H.
Defined.

End MMapInstances.

(* Fin AutosubstSsr (examples) *)

(* Example/Context.v *)

Definition get {T} `{Ids T} (Gamma : seq T) (n : var) : T :=
  nth (ids 0) Gamma n.
Arguments get {T _} Gamma n.

Fixpoint dget {T} `{Ids T} `{Subst T} (Gamma : list T) (n : var) {struct n} : T :=
  match Gamma, n with
    | [::], _ => ids 0
    | A :: _, 0 => A.[ren (+1)]
    | _ :: Gamma, n.+1 => (dget Gamma n).[ren (+1)]
  end.
Arguments dget {T _ _} Gamma n.

Lemma get_map {T} `{Ids T} (f : T -> T) Gamma n :
  n < size Gamma -> get (map f Gamma) n = f (get Gamma n).
Proof. exact: nth_map. Qed.

(* Fin Context.v *)

(* Examples/Poplmark.v *)
Notation "Gamma `_ x" := (dget Gamma x).
Notation "Gamma ``_ x" := (get Gamma x) (at level 3, x at level 2,
  left associativity, format "Gamma ``_ x").

Inductive term : Type :=
  | TeVar (x:var)
  | tyUnit
  | tyAr : term -> term -> term -> term.

Inductive is_term : term -> Prop :=
  | isteVar x : is_term  (TeVar x).

Definition bis_term (t:term) :=
  match t with
    TeVar _ => true
  | _ => false
  end.

Fixpoint bis_ty (t:term) :=
  match t with
    tyUnit => true
  | tyAr A t u => bis_ty A && bis_term t && bis_term u
  | _ => false
  end.

Inductive is_ty : term -> Prop :=
| istyUnit : is_ty tyUnit
| istyAr A t u : is_ty A -> is_term t -> is_term u -> is_ty (tyAr A t u).

Lemma is_termP t : reflect (is_term t) (bis_term t).
Admitted.

Lemma is_tyP t : reflect (is_ty t) (bis_ty t).
Admitted.


Instance Ids_term : Ids term. derive. Defined.
Instance Rename_term : Rename term. derive. Defined.
Instance Subst_term : Subst term. derive. Defined.

Instance SubstLemmas_term : SubstLemmas term. derive. Qed.

(* *********


Decidable equality


 ********** *)
Lemma eq_dec_term (x y : term) : {x=y} + {~x=y}.
  decide equality.
  decide equality.
Defined.
Definition term_eqP : Equality.axiom (compareb eq_dec_term) := compareP eq_dec_term.

Canonical term_eqMixin := EqMixin term_eqP.
Canonical term_eqType := Eval hnf in EqType term term_eqMixin.

(*
Instance Ids_type : Ids type.
cbn.
red.
derive. Defined.
Instance Rename_type : Rename type. derive. Defined.
Instance Subst_type : Subst type. derive. Defined.
Instance SubstLemmas_type : SubstLemmas type. derive. Qed.
Instance HSubst_term : HSubst type term. derive. Defined.

Instance HSubstLemmas_term : HSubstLemmas type term. derive. Qed.
Instance SubstHSubstComp_type_term : SubstHSubstComp type term. derive. Qed.
*)



Reserved Notation "Gamma |- A : B"
  (at level 68, A at level 99, no associativity,
   format "Gamma  |-  A  :  B").
Reserved Notation "Gamma |- A"
  (at level 68, A at level 99, no associativity,
   format "Gamma  |-  A").

(*

* , * , 0 -> 1 |- 0 : 1 -> 2

*)

Record Ctx :=
  { types :> nat -> term ;
    wf_types : forall n, is_ty (types n) }.

Inductive ty : list term -> term -> term  -> Prop :=
| ty_var0 Γ A : wfCtx (A :: Γ) -> ty  (A::Γ) A.[ren(+1)] (ids 0)
| ty_termS Γ s A B : Γ |- s : A -> (B::Γ) |- s.[ren(+1) ] : A.[ren(+1)]
with wfCtx : (list term) -> Prop :=
     | wfEmpty : wfCtx nil
     | wfCtxNext Γ A :  wfTy Γ A -> wfCtx (A::Γ)
with wfTy :  (list term) ->   term -> Prop :=
  | wfUnit Γ : Γ |- tyUnit
  | wfAr Γ A t u : Γ |- t : A -> Γ |- u : A -> Γ |- (tyAr A t u)
where "Gamma |- A" := (wfTy Gamma A) and
 "Gamma |- s : A" := (ty Gamma A s).

Fixpoint bty Γ t :=
  match t with
  | TeVar n =>
    match Γ with
      nil => None
    | A :: Γ' => 
      if bwfTy Γ' A && (n < size Γ) then
                Some (Γ``_n)
              else
                None
    end
  | _ => None
  end
with
bwfTy Γ A :=
  match A with
    tyUnit => true
  | tyAr A' t u =>.
with bwfCtx Γ {struct Γ} :=
       match Γ with
         nil => true
       | A :: Γ => false
       end.

Inductive wfTy (Γ:Ctx) : type -> Type :=
  | wfUnit : Γ |- tyUnit
  | wfAr A t u : Γ |- t : A -> Γ |- u : A -> Γ |- (tyAr A t u)
where "Gamma |- A" := (wfTy Gamma A).
*)

Definition substs := list term.
Definition ctxt := list term.

Inductive ty_substs Δ : ctxt -> substs -> Type :=
| tysEmpty : ty_substs Δ nil nil
| tysNext Γ (A:term) t σ : ty_substs Δ Γ σ
                           -> wfTy Γ A
                           -> Δ |- t : A.[get σ] ->
                                     ty_substs Δ (A::Γ) (t::σ).


Set Bullet Behavior "Strict Subproofs".
(* Fixpoint ty_fix Γ t := *)
(*   match Γ with *)
(*     nil => None *)
(*   | A :: Γ' => *)
Lemma lemma8 Δ Γ A σ t (tyσ : ty_substs Δ Γ σ) (tyt : Γ |- t : A)
  : Δ |- (t.[get σ]) : A.[get σ].
  elim :Γ σ  /tyσ A t tyt.
  - (* impossible *)
    intros;
    inversion tyt.
  - move =>  Γ Aσ tσ σ tyσ IH.
    move => wfAσ tytσ A t.
    move => tyt.
    remember (Aσ :: Γ) as Γ' eqn:eqΓ'.
    induction tyt.
    + cbn.
      asimpl.
      have : A= Aσ by congruence.
      now move => ->.
    + asimpl.
      eapply IH.
      congruence.
Qed.